---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Fundamentos de Python

```{r echo=FALSE}
library(reticulate)
use_python("C:/Users/m_tai/anaconda3/python.exe", required = TRUE)
```

<!-- C:/Users/m_tai/anaconda3/python.exe -->

<!-- C:\\Users\\m_tai\\AppData\\Local\\r-miniconda/python.exe -->

::: {.callout-important title="Attention!!!"}
From now on, all code presented in this book will be in the Python language.
:::

The source for the construction of this material is @mckinney2022.

## Installation
Follow the steps below to install Anaconda and JupyterLab:

1.  Download and install Anaconda from the [official website](https://www.anaconda.com/products/distribution). Follow the installation instructions for your specific operating system.

2.  After installing Anaconda, open the Anaconda Navigator and create a new virtual environment. Navigate to the "Environments" section and click "Create" to add a new environment. Name the environment and choose the Python version you want to use.

3.  After creating the virtual environment, activate it by clicking on the newly created environment in the list of environments and selecting "Open Terminal". In the terminal, type the command `conda activate your_environment_name` (replace your_environment_name with the name of the environment you created).

4.  With the virtual environment activated, install JupyterLab by typing `conda install jupyterlab` in the terminal.

5.  After installing JupyterLab, run it by typing `jupyter lab` in the terminal or through the Anaconda interface. This will open JupyterLab in your default browser.

6.  In JupyterLab, you can create a new Python notebook by clicking the "+" icon in the left sidebar and selecting "Python 3" under the "Notebook" header.

## Fundamental data Types

In Python, the fundamental data types include `integer`, `float`, `string`, and `boolean`:

-   Integers are whole numbers, such as 1, 2, -3, etc. 
- Floats are decimal numbers, such as 3.14, -0.5, etc.
-   Strings are sequences of characters, such as "hello", "world", "python", etc.
-   Booleans are logical values that represent true (`True`) or false (`False`).

These data types are the basic building blocks for representing different types of information in Python, and are widely used in programming to perform operations and data manipulations.

### The Integer data type
An integer data type (`integer`) in Python represents whole numbers, i.e., numbers without decimal places. For example, 5, -10, and 0 are all examples of integers. In Python, integers are represented by the `int` class. In the examples below, we perform basic operations with integers.

```{python}
2 + 2  
```

In the first line, we calculate the sum of 2 and 2.

```{python}
quantity = 200
print(quantity)
type(quantity)
```

Above, we assign the value 200 to the variable `quantity` and print it using `print(quantity)`. Finally, we check the data type of the variable quantity with `type(quantity)`, which returns `<class 'int'>`, indicating that it is an integer.

### The Float data Type

A float data type (`float`) in Python represents decimal numbers, i.e., numbers that can have a fractional part. For example, 3.14, -0.001, and 2.71828 are all floats. In Python, floats are represented by the `float` class.

```{python}
1.75 + 2**3 
interest_rate = 1.25

print(interest_rate)
type(interest_rate)
```

In the first line of the example above, we calculated the sum of 1.75 and 2 raised to the power of 3. Then, we assigned the value 1.25 to the variable `interest_rate` and print it using `print(interest_rate)`. Finally, we checked the data type of the variable `interest_rate` with `type(interest_rate)`, which returned `<class 'float'>`, indicating that it is a float.

### The String data Type
```{python}
country = "Brazil" 

print(country)
type(country)
```

In the code above, we created a variable called `country` and assigned it the value "Brazil", which was a `string`. Then, we printed the value of the variable country using `print(country)`, which displayed "Brazil" on the screen. Finally, we checked the data type of the variable country with `type(country)`, which returned `<class 'str'>`, indicating that it was a `string`.

### The Boolean data Type
The boolean data type, also known as `bool`, is used to represent true or false values. In Python, the boolean values are `True` and `False`.

```{python}
1 == 2
```

```{python}
5 % 2 == 0
```

```{python}
interest_rate_increasing = True
print(interest_rate_increasing)
type(interest_rate_increasing)
```

In the first line of the example above, there is an equality check between 1 and 2, which returns `False` because 1 is not equal to 2. Next, we have `5 % 2 == 0`, which also returns `False` because the remainder of 5 divided by 2 is not equal to zero. Finally, we have the variable `interest_rate_increasing` assigned to `True`, indicating that the interest rate is increasing. When printing and checking the type of this variable, we get `True` as the result and the type `bool`, indicating that it is a boolean value.

### Type Coercion
Type coercion in Python refers to the forced conversion of one data type to another.

```{python}
str_num = "1.41"
type(str_num)
```

```{python}
float(str_num)
```

Note that the variable `str_num` is a string representing the number 1.41. Initially, its type is checked using the `type` function, which returns `<class 'str'>`, indicating that it is a string. Then, we use the `float()` function to explicitly convert `str_num` to a `float`. After the conversion, the value of `str_num` is "1.41" and its type is changed to `<class 'float'>`.

Below are other examples of coercion.

Coercion to integer:

```{python}
num_float = 3.14
num_int = int(num_float)
print(num_int)
```

Coercion to boolean:

```{python}
int_value = 0
bool_value = bool(int_value)
print(bool_value)
```

Coercion to string (str):

```{python}
num_float = 3.14
num_str = str(num_float)
print(num_str) 
```

In the code above, we are coercing a float value to a string.

## Basic Objects
In Python, there are three basic data structures: lists, tuples, and dictionaries: 

- Lists are ordered and mutable collections of elements, allowing the inclusion of items of different types and the modification of the values contained in them. 

- Tuples are similar to lists, but they are immutable, meaning they cannot be changed after creation. 

- Dictionaries are unordered collections of key-value pairs, where each value is associated with a unique key, providing efficient access to data through the keys.

### Lists
In Python, a list is a data structure that allows storing an ordered collection of elements. To create a list, we use square brackets `[]`, and the elements are separated by commas. We can instantiate an empty list simply by using `[]` or the `list()` function. For example:

```{python}
empty_list = [] # Empty list
empty_list = list() # alternative

# list with GDP of countries
gdp_countries = [1800, 2500, 3200, 5600, 6700]
```

In the example above, we also have the list `gdp_countries` that stores the Gross Domestic Product (GDP) of different countries. To access elements of a list in Python, we can use the index of the desired element within square brackets `[]`. The index starts at zero for the first element, one for the second, and so on. For example:

```{python}
print(gdp_countries[1])
```

We can also access elements from the end of the list using negative indices, where -1 represents the last element, -2 the second last, and so on:

```{python}
# Accessing the last element
last_element = gdp_countries[-1]
print(last_element)

# Accessing the second last element
second_last_element = gdp_countries[-2]
print(second_last_element)
```

We can use the `append()` method if we want to add an element to the end of the list, or the `insert()` method if we want to add an element at a specific position. See the examples of how to use both methods:

```{python}
# Adding elements to the end of the list using append()
gdp_countries.append(2000)  # Adds the value 2000 to the end of the list

# Adding an element at a specific position using insert()
gdp_countries.insert(1, 1500)  # Adds the value 1500 at position 1 of the list
```

To check the size of a list in Python, we can use the `len()` function.

```{python}
list_size = len(gdp_countries)
print("List size:", list_size) 
```

To sort a list, we can use the `sort()` method for *in-place* sorting (i.e., the list is modified) or the `sorted()` function to return a new sorted list without modifying the original:

```{python}
# Using the sorted() function to return a new sorted list
sorted_list = sorted(gdp_countries)
print("New sorted list:", sorted_list)

# Sorting the list using the sort() method
gdp_countries.sort()
print("Sorted list:", gdp_countries)
```

The `.pop()` method is used to remove and return the last element of a list. We can also specify an index to remove and return an element at a specific position in the list. Here's how to use the `.pop()` method:

```{python}
# Removing and returning the last GDP from the list
last_gdp = gdp_countries.pop()
print("Last GDP removed:", last_gdp) 
print("Updatad list:", gdp_countries)

# Removing and returning the GDP of a specific country from the list
removed_gdp = gdp_countries.pop(1) 
print("GDP removed:", removed_gdp) 
print("Updatad list:", gdp_countries)
```

### Tuples
Tuples are data structures similar to lists, but with a fundamental difference: they are immutable, meaning once created, they cannot be modified. They are represented by parentheses `()` instead of square brackets `[]`.

```{python}
x = (1, 2, 3) # tuple (immutable list)
print(x)

# x[0] = 5 # generates an error!
```

We can use tuples to represent information that should not be changed, such as exchange rates between currencies. See:

```{python}
exchange_rates = (("USD", "EUR", 0.82), ("USD", "JPY", 105.42), ("EUR", "JPY", 128.64))
```

In this example, we have a tuple of tuples representing the exchange rates between the US dollar (USD), the euro (EUR), and the Japanese yen (JPY) for a fixed fictitious data. Each inner tuple contains three elements: the source currency, the target currency, and the exchange rate. Since this information should not be changed, a tuple is an appropriate choice.

::: callout-tip
To access the elements of a tuple, you can use the same syntax you use to access the elements of a list, i.e., using square brackets `[]` and the index of the desired element. Remember that indices in Python start at 0!
:::

### Dictionaries
Dictionaries in Python are data structures that allow storing key-value pairs. Each value is associated with a specific key, allowing quick access to data through the keys, rather than numerical indices, as in lists and tuples. This structure is useful when you need to associate information in a way similar to a database, where you can search for information based on a specific key.

In the example below, we have share quotes of some Brazilian companies listed on the share exchange.

```{python}
brazilian_share_quotes = {
    "PETR4": 36.75,
    "VALE3": 62.40,
    "ITUB4": 34.15,
    "BBDC4": 13.82
}
```

Each key is the share ticker symbol, and the associated value is the share price on a fixed data. For example, `brazilian_share_quotes["PETR4"]` would return the price of Petrobras share.

Alternatively, you can create a dictionary using the `dict` function:

```{python}
brazilian_share_quotes = dict(PETR4=36.12, VALE3=62.40, ITUB4=34.15, BBDC4=13.82)
```

You can add new key-value pairs to a dictionary or updata existing values. For example:

```{python}
brazilian_share_quotes["ABEV3"] = 12.80
brazilian_share_quotes["PETR4"] = 36.75
```

You can remove key-value pairs from a dictionary using the `pop()` method. For example:

```{python}
removed_value = brazilian_share_quotes.pop("BBDC4")
```

Other useful methods for working with dictionaries are `keys()`, `values()`, and `items()` which return lists with the keys, values, and items of the dictionary, respectively.

```{python}
brazilian_share_quotes.keys() # returns a list containing all the keys
```

```{python}
brazilian_share_quotes.values() # returns a list containing all the values
```

```{python}
brazilian_share_quotes.items() # returns a list of tuples
```


## Slices
The concept of slices, also known as "*slicing*", refers to the technique of extracting specific parts of a sequence, such as a list, tuple, or string, using indices. By using slices, you can select a range of elements within the sequence.

The basic syntax for slices is `sequence[start:stop:step]`, where:

-   `start`: the starting index of the range to be included in the slice (inclusive).

-   `stop`: the ending index of the range to be included in the slice (exclusive).

-   `step`: the step size between selected elements (optional).

Consider the list below.

```{python}
country_names = ["Indonesia", "India", "Brazil", "South Africa", "Germany"]
```

To access the first three countries, we can do:

```{python}
country_names[:3]
```

This returns the elements of the list from index 0 (inclusive) to index 3 (exclusive).

If we want to access the countries from the second to the third:

```{python}
country_names[1:4]
```

We can even make reverse slices, where the starting index is greater than the ending index, indicating that we want to traverse the list from back to front. For example, to access the last three countries:

```{python}
country_names[-3:]
```

Suppose we want to access all countries, but skipping every two:

```{python}
country_names[::2]
```

In this example, `::2` indicates that we want to start from the beginning of the list and go to the end, skipping every two elements.

## Conditionals
The `if` and `else` are control flow structures in Python, used to make decisions based on conditions.

The block of code inside the `if` is executed if the condition evaluates to true (`True`). For example:

```{python}
age = 18
if age >= 18:
    print("You are of legal age.")
```

The block of code inside the `else` is executed if the condition of the if evaluates to false (`False`). For example:

```{python}
age = 16
if age >= 18:
    print("You are of legal age.")
else:
    print("You are underage.")
```

::: {.callout-tip title="Indentation"}
In Python, indentation is crucial for defining code blocks. In the example above, notice that the code inside the `if` and `else` is indented with four spaces. This indicates that these lines belong to the conditional code block. If there is no proper indentation, Python will raise a syntax error.
:::

## Loop Structures

Repetition structures are used to execute a block of code repeatedly based on a specific condition. There are two main repetition structures in Python: `for` and `while`.

### `for`

The `for` loop is used to iterate over a sequence (such as a list, tuple, dictionary, etc.) and execute a block of code for each item in the sequence. For example:

```{python}
for x in range(0, 20, 3):  # remember slice notation
    print(x)
```

```{python}
for country in country_names:
    print("Country:", country)
```

In the example below, we have a list of companies and a list of profits. Using the `zip()` function, we iterate over these two lists in parallel, printing the company name and its corresponding profit. The `zip()` function combines elements from two or more sequences (like lists, tuples, etc.) into ordered pairs.

```{python}
companies = ["Company A", "Company B", "Company C"]
profits = [100000, 150000, 80000]

for company, profit in zip(companies, profits):
    print("The profit of", company, "was R$", profit)
```

### `while`

The `while` loop is a control flow structure that executes a block of code repeatedly while a specified condition is true.

```{python}
years = 1
investment = 1000
return_rate = 0.05

while years <= 10:
    investment *= (1 + return_rate)
    print("After", years, "years, the investment is worth R$", round(investment, 2))
    years += 1
```

In this example, the loop calculates the value of the investment over 10 years, considering an annual return of 5%. In each iteration, the investment value is updatad by multiplying by the growth factor `(1 + return_rate)`.

## Comprehensions

*Comprehensions* are a concise and powerful way to create collections in Python, such as lists, dictionaries, and sets, from existing iterables like lists, dictionaries, sets, or sequences. They allow the creation of these collections more efficiently and readably compared to the traditional approach using loops. Comprehensions can include conditional expressions to filter elements or transform elements during collection creation.

For example, you can create a list of squares of numbers from 1 to 10 using a list comprehension:

```{python}
squares = [x ** 2 for x in range(1, 11)]
squares
```

This is equivalent to:

```{python}
squares = []
for x in range(1, 11):
    squares.append(x ** 2)
```

Comprehensions can be applied to lists, dictionaries, and sets, and you can add conditional clauses to filter elements based on a specific condition.

Below, the variables `rows` and `columns` are defined as ranges from 1 to 3 and 1 to 2, respectively. Then, a list comprehension is used to generate all possible pairs, combining each value of `row` with each value of `column`. Finally, a `for` loop iterates over the list of pairs and prints each pair to the output. The result will be the printing of all possible ordered pairs, combining the specified row and column values.

```{python}
rows = range(1, 4)
columns = range(1, 3)

pairs = [(r, c) for r in rows for c in columns]

for x in pairs:
    print(x)
```

In the example below, the word "pneumonoultramicroscopicsilicovolcanoconiosis" is analyzed to count how many times each letter appears. Then, a loop is performed over the resulting dictionary to print the count of occurrences for each letter.

```{python}
word = "pneumonoultramicroscopicsilicovolcanoconiosis"

letter_frequency = {letter: word.count(letter) for letter in word}

for letter, occurrences in letter_frequency.items():
    print("The letter", letter, "occurs", occurrences, "times" if occurrences > 1 else "time")
```

## Functions

Functions are reusable code blocks that perform a specific task. They accept inputs, called arguments, and can return results.

In Python, the basic syntax of a function is as follows:

```{python}
#| eval: false

def function_name(argument1, argument2, ...):
    # Function body
    # Do something with the arguments
    result = argument1 + argument2
    return result
```

For example, let's create a function in Python called `calculate_interest` that calculates the final amount of an investment based on the initial value, the interest rate, and the number of years:

```{python}
def calculate_interest(initial_value, interest_rate, years):
    final_amount = initial_value * (1 + interest_rate) ** years
    return final_amount
```

Now, let's define values and call the function:

```{python}
initial_investment = 1000  # Initial investment value
annual_interest_rate = 0.05  # Annual interest rate (5%)
years = 5  # Number of years
result = calculate_interest(initial_investment, annual_interest_rate, years)
print("The final amount after", years, "years will be: R$", round(result, 2))
```

### `lambda` Function

A lambda function in Python is an anonymous function, which means it is a function without a name. It is defined using the keyword `lambda` and can have any number of arguments but only one expression. The basic syntax is as follows:

```{python}
#| eval: false
lambda argument1, argument2, ...: expression
```

See an example of a lambda function that calculates the square of a number:

```{python}
square = lambda x: x ** 2
```

In this example, `lambda x: x ** 2` creates a function that accepts an argument `x` and returns `x` squared. You can then use this function the same way as any other function. For example:

```{python}
result = square(5)
print(result)
```

Lambda functions are often used in situations where you need a temporary and simple function, such as in mapping, filtering, and sorting operations.

## Classes and Objects

A class is a structure that defines the behavior and properties of a type of object. We can think of a class as a representation of an abstract concept, such as a financial transaction or a specific type of investment.

For example, we can create a class called `Transaction` to represent a financial transaction, with properties such as the transaction amount, data, and transaction type.

An object, on the other hand, is a specific instance of a class. It represents a concrete entity with its own characteristics and behaviors. Continuing with the `Transaction` class example, we can create individual objects to represent specific transactions, such as buying shares of a company on a certain data.

```{python}
class Transaction:
    def __init__(self, value, data, type):
        self.value = value
        self.data = data
        self.type = type
    
    def print_info(self):
      print(f"Transaction type: {self.type}, Value: R${self.value}, data: {self.data}")
```

In this example, the `Transaction` class has a special method `__init__` that is called when a new object is created. This method initializes the object's properties with the values provided as arguments. Additionally, the class has a method called `print_info`, which prints transaction information, including the type, value, and data. This method also receives `self` as a parameter to access the current instance's attributes. By calling `print_info()` on a `Transaction` object, it will display the formatted transaction information.

Below, we create two objects of the `Transaction` class, `transaction1` and `transaction2`, and access their properties to obtain information about the transactions.

```{python}
# Creating objects of the Transaction class
transaction1 = Transaction(value=1000, data="2024-03-11", type="share purchase")
transaction2 = Transaction(value=500, data="2024-03-12", type="share sale")

# Accessing object properties
print("Transaction 1 value:", transaction1.value)
print("Transaction 2 data:", transaction2.data)

# Accessing object methods
transaction1.print_info()
transaction2.print_info()
```

## Exercises

**1.** Working with basic data types

**a)** Create variables to represent economic data, such as the GDP of at least three countries, inflation rates, or unemployment rates. Use recent and historical values to create a diverse set of economic data representing different economic contexts around the world.

**b)** Perform basic mathematical operations with this data, such as calculating averages, growth rates, or proportions. For example, you can calculate GDP value averages, GDP growth rates over time, and proportions between different economic indicators (such as per capita GDP relative to total GDP), among other operations.

**2.** During data analysis, it may be necessary to convert between different data types. Use fundamental data types (integers, floats, strings) and apply type coercion as needed. Consider, for instance, that the variables representing GDP were given in string format. Then, convert to a float type to compute the average of the GDP values considered. After that, convert the GDP values back to a string for output formatting in the following format: 1,111%.

**3.** Use the code below to generate a pandas dataFrame that represents the closing price of a share:

```python
import pandas as pd

# Creating a list of dates
dates = pd.date_range(start='2023-01-01', end='2023-12-31', freq='B')  # Frequency 'B' to consider only business days

# Creating a series of simulated closing prices
import numpy as np
np.random.seed(0)  # Set the random seed for reproducibility
closing_prices = np.random.normal(loc=50, scale=5, size=len(datas))  # Simulating prices with a normal distribution

# Creating the dataFrame
df_share_prices = pd.dataFrame({'date': dates, 'Closing Price': closing_prices})

# Displaying the first few rows of the dataFrame
print(df_share_prices.head())
```

**a)** Obtain the share closing prices during the specified month of January.

**b)** Obtain the share closing prices between 2023-06-01 and 2023-12-31.

**c)** Obtain the share closing prices on Fridays throughout the entire period. Calculate the average closing price on Mondays and compare it to Fridays. Which one has a higher standard deviation?

```python
# Creating a column to store the day of the week
df_share_prices['Day of the Week'] = df_share_prices['date'].dt.weekday

# Displaying the first few rows of the dataFrame with the new column
print(df_share_prices.head())
```

**4.** Consider the list stored in the variable `gdp_years` below and use a list comprehension to calculate the GDP growth percentage relative to the previous year for each country.

```python
# List of GDP values for a country over the last five years
gdp_years = [1000, 1200, 800, 1500, 2000]  # Example fictitious GDP values
```

```python
#| eval: false
#| echo: false
# List comprehension to calculate GDP growth percentage relative to the previous year for each country
gdp_growth = [(current / previous - 1) * 100 for current, previous in zip(gdp_years[1:], gdp_years[:-1])]
print("GDP growth percentage relative to the previous year:")
for i, growth in enumerate(gdp_growth):
    print(f"Country {i + 2}: {growth:.2f}%")
```

**5.** Write a function called `calculate_pci` that takes three arguments:

- `product_basket`: A dictionary mapping each product to its quantity in the basket.  
- `current_price`: A dictionary mapping each product to its current price.  
- `reference_price`: A dictionary mapping each product to its base price (reference price). The Consumer Price Index (CPI) is calculated using the following formula: $$PCI = \sum_i \frac{\text{current price of product}_i}{\text{reference price of product}_i} \times \text{product quantity}_i.$$ The function should return the calculated PCI value. Use the code below to test your function.

```python
#| eval: false
#| echo: false
def calculate_pci(product_basket, current_price, reference_price):
    pci = 0
    for produto, preco_atual in current_price.items():
        preco_base = reference_price[produto]
        pci += (preco_atual / preco_base) * product_basket[produto]
    return pci

# Usage example of the calculate_pci function
product_basket = {'rice': 1, 'beans': 2, 'meat': 3}  # Basket of products with their respective quantities
current_price = {'rice': 5, 'beans': 8, 'meat': 12}      # Current prices of products
reference_price = {'rice': 4, 'beans': 7, 'meat': 10}      # Reference prices of products

pci = calculate_pci(product_basket, current_price, reference_price)
print("The Consumer Price Index (CPI) is:", pci)
```
```{python}
#| eval: false
# Basket of products with their respective quantities
product_basket = {'rice': 1, 'beans': 2, 'meat': 3}  
# Current prices of the products
current_price = {'rice': 5, 'beans': 8, 'meat': 12}      
# Reference prices of the products
reference_price = {'rice': 4, 'beans': 7, 'meat': 10}      

# Call the function to calculate the pci
pci = calculate_pci(product_basket, current_price, reference_price)
print("The Consumer Price Index (IPC) is:", pci)

```

**6.** You are tasked with developing a system to record and manage share buy and sell transactions, as well as calculate important information about the investment portfolio. For this, you must implement two Python classes: `Transaction` and `Portfolio`.

The `transaction` class represents a single share buy or sell transaction. It has the following attributes:

- `date`: a string representing the transaction date in the format 'YYYY-MM-DD'.  
- `type`: a string indicating the transaction type, which can be 'buy' or 'sell'.  
- `value`: an integer representing the number of shares transacted.  

The `Portfolio` class represents the user's investment portfolio, which contains several share transactions. It has the following attributes:

- `transactions`: a list that stores all the share transactions performed.  

Additionally, the `Portfolio` class has the following methods:

- `add_transaction(transaction)`: adds a new transaction to the portfolio.  
- `calculate_current_position(current_share_price)`: calculates the current share position in the portfolio based on the current share price.  
- `calculate_present_value(current_share_price)`: calculates the present value of the share in the portfolio based on the current share price.  

```python
#| eval: false
#| echo: false
class transaction:
    def __init__(self, date, type, value):
        self.date = date
        self.type = type  # 'buy' or 'sell'
        self.value = value

class Portfolio:
    def __init__(self):
        self.transactions = []

    def add_transaction(self, transaction):
        self.transactions.append(transaction)

    def calculate_current_position(self, current_share_price):
        n_shares = 0
        for transaction in self.transactions:
            if transaction.type == 'buy':
                n_shares += transaction.value
            elif transaction.type == 'sell':
                n_shares -= transaction.value
        return n_shares

    def calculate_present_value(self, current_share_price):
        current_position = self.calculate_current_position(current_share_price)
        present_value = current_position * current_share_price
        return present_value

# Example usage of the classes

# Creating some transactions
transaction1 = transaction('2024-03-18', 'buy', 10)  # Buy 10 shares
transaction2 = transaction('2024-03-19', 'buy', 5)   # Buy 5 more shares
transaction3 = transaction('2024-03-20', 'sell', 8)    # Sell 8 shares

# Creating a portfolio and adding transactions
Portfolio = Portfolio()
Portfolio.add_transaction(transaction1)
Portfolio.add_transaction(transaction2)
Portfolio.add_transaction(transaction3)

# Current share value
current_share_price = 50  # Hypothetical share value

# Calculating the current position and present value in the portfolio
current_position = Portfolio.calculate_current_position(current_share_price)
present_value = Portfolio.calculate_present_value(current_share_price)

print("Current share position in the portfolio:", current_position)
print("Present value in the portfolio:", present_value)
```

**a)** Implement the `transaction` and `Portfolio` classes with the attributes and methods described above.

**b)** Create three instances of the `transaction` class to represent different share buy and sell transactions.

**c)** Create an instance of the `Portfolio` class and add the created transactions to the portfolio.

**d)** Test the methods of the `Portfolio` class using the examples provided in the test code above.


```{python}
#| eval: false
# Creating some transactions
transaction1 = transaction('2024-03-18', 'buy', 10)  # Buy 10 shares
transaction2 = transaction('2024-03-19', 'buy', 5)   # Buy 5 more shares
transaction3 = transaction('2024-03-20', 'sell', 8)    # Sell 8 shares

# Creating a portfolio and adding transactions
Portfolio = Portfolio()
Portfolio.add_transaction(transaction1)
Portfolio.add_transaction(transaction2)
Portfolio.add_transaction(transaction3)

# Current share value
current_share_price = 50  # Hypothetical share value

# Testing the methods of the Portfolio class
current_position = Portfolio.calculate_current_position(current_share_price)
present_value = Portfolio.calculate_present_value(current_share_price)

# Exibindo os resultados
print("Current share position in the Portfolio:", current_position)
print("Present value in the Portfolio:", present_value)
```
